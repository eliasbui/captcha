#!/usr/bin/env python3
"""
Captcha Labeling GUI Tool
GUI tool ƒë·ªÉ labeling th·ªß c√¥ng c√°c ·∫£nh captcha ƒë√£ crawl t·ª´ GDT
"""
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
from datetime import datetime
from pathlib import Path
import tkinter as tk
import shutil
import argparse
import cv2
import os
import json

class CaptchaLabelingTool:
    def __init__(self, input_dir="image_crawl/raw_captcha_images",
                 output_dir="image_crawl/train_images",
                 progress_file="image_crawl/labeling_progress.json"):
        self.input_dir = Path(input_dir)
        self.output_dir = Path(output_dir)
        self.progress_file = Path(progress_file)

        # T·∫°o output directory
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # Load existing vocabulary t·ª´ mapping_char.json
        self.vocabulary = self._load_existing_vocabulary()

        # Load image list v√† progress
        self.image_files = self._get_image_files()
        self.progress = self._load_progress()
        self.current_index = self.progress.get('current_index', 0)

        # GUI components
        self.root = None
        self.canvas = None
        self.image_label = None
        self.label_entry = None
        self.progress_var = None
        self.status_var = None
        self.current_image = None
        self.zoom_factor = 1.0

        print(f"Loaded {len(self.image_files)} images from {self.input_dir}")
        print(f"Current vocabulary: {''.join(sorted(self.vocabulary))}")
        print(f"Progress: {self.progress.get('labeled_count', 0)}/{len(self.image_files)} images labeled")

    def _load_existing_vocabulary(self):
        """Load vocabulary t·ª´ mapping_char.json"""
        mapping_file = Path("ocr/dataset/mapping_char.json")
        if mapping_file.exists():
            try:
                with open(mapping_file, 'r') as f:
                    mapping = json.load(f)
                    # Extract characters (values) t·ª´ mapping
                    chars = set(mapping.values())
                    chars.discard("-")  # Lo·∫°i b·ªè blank character
                    return chars
            except Exception as e:
                print(f"Warning: Could not load vocabulary from {mapping_file}: {e}")

        # Default vocabulary n·∫øu kh√¥ng load ƒë∆∞·ª£c
        return set("23456789abcdefghkmnopqrwxy")

    def _get_image_files(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ image files trong input directory"""
        extensions = {'.png', '.jpg', '.jpeg', '.bmp', '.tiff'}
        files = []
        for ext in extensions:
            files.extend(list(self.input_dir.glob(f"*{ext}")))
            files.extend(list(self.input_dir.glob(f"*{ext.upper()}")))
        unique = list(set(files))
        unique.sort()
        return unique

    def _load_progress(self):
        """Load labeling progress t·ª´ JSON file"""
        if self.progress_file.exists():
            try:
                with open(self.progress_file, 'r') as f:
                    return json.load(f)
            except Exception as e:
                print(f"Warning: Could not load progress file: {e}")

        return {
            'current_index': 0,
            'labeled_count': 0,
            'labeled_files': {},
            'session_start': datetime.now().isoformat()
        }

    def _save_progress(self):
        """L∆∞u progress v√†o JSON file"""
        try:
            with open(self.progress_file, 'w') as f:
                json.dump(self.progress, f, indent=2)
        except Exception as e:
            print(f"Error saving progress: {e}")

    def _validate_label(self, label):
        """Validate label text"""
        if not label or len(label.strip()) == 0:
            return False, "Label kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"

        label = label.strip().lower()

        # Ki·ªÉm tra ƒë·ªô d√†i (th∆∞·ªùng captcha c√≥ 4-6 k√Ω t·ª±)
        if len(label) > 10:
            return False, "Label qu√° d√†i (>10 k√Ω t·ª±)"

        # Ki·ªÉm tra k√Ω t·ª± kh√¥ng h·ª£p l·ªá
        invalid_chars = set(label) - self.vocabulary
        if invalid_chars:
            # Cho ph√©p th√™m k√Ω t·ª± m·ªõi, nh∆∞ng c·∫£nh b√°o
            return True, f"K√Ω t·ª± m·ªõi s·∫Ω ƒë∆∞·ª£c th√™m v√†o vocabulary: {''.join(sorted(invalid_chars))}"

        return True, "OK"

    def _preprocess_image_for_display(self, image_path):
        """Preprocess ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã t·ªët h∆°n trong GUI"""
        # ƒê·ªçc ·∫£nh
        img = cv2.imread(str(image_path), cv2.IMREAD_UNCHANGED)

        if img is None:
            return None

        # N·∫øu c√≥ alpha channel, extract n√≥
        if len(img.shape) == 3 and img.shape[2] == 4:
            img = img[:,:,3]  # L·∫•y alpha channel nh∆∞ trong main_fastapi.py
            img = 255 - img   # Invert
        elif len(img.shape) == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Resize ƒë·ªÉ hi·ªÉn th·ªã r√µ h∆°n (scale up nh·ªè)
        height, width = img.shape
        if height < 100 or width < 200:
            scale = max(2, min(4, 200 // width, 100 // height))
            img = cv2.resize(img, (width * scale, height * scale), interpolation=cv2.INTER_NEAREST)

        # Convert sang PIL Image
        pil_img = Image.fromarray(img)
        return pil_img

    def create_gui(self):
        """T·∫°o GUI interface"""
        self.root = tk.Tk()
        self.root.title("GDT Captcha Labeling Tool")
        self.root.geometry("800x600")

        # Variables
        self.progress_var = tk.StringVar()
        self.status_var = tk.StringVar()
        self.auto_next_var = tk.BooleanVar(value=True)  # Auto next sau khi save

        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)

        # Progress info
        progress_frame = ttk.LabelFrame(main_frame, text="Progress", padding="5")
        progress_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))

        ttk.Label(progress_frame, textvariable=self.progress_var).grid(row=0, column=0, sticky=tk.W)
        ttk.Label(progress_frame, textvariable=self.status_var).grid(row=0, column=1, sticky=tk.E)
        progress_frame.columnconfigure(1, weight=1)

        # Image display
        image_frame = ttk.LabelFrame(main_frame, text="Captcha Image", padding="5")
        image_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        image_frame.columnconfigure(0, weight=1)
        image_frame.rowconfigure(0, weight=1)

        # Canvas for image v·ªõi scrollbars
        canvas_frame = ttk.Frame(image_frame)
        canvas_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        canvas_frame.columnconfigure(0, weight=1)
        canvas_frame.rowconfigure(0, weight=1)

        self.canvas = tk.Canvas(canvas_frame, bg='white', height=200)
        v_scrollbar = ttk.Scrollbar(canvas_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        h_scrollbar = ttk.Scrollbar(canvas_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.canvas.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        self.canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        # Label input
        input_frame = ttk.LabelFrame(main_frame, text="Label Input", padding="5")
        input_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        input_frame.columnconfigure(1, weight=1)

        ttk.Label(input_frame, text="Label:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.label_entry = ttk.Entry(input_frame, font=('Arial', 14))
        self.label_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 5))
        self.label_entry.bind('<Return>', lambda e: self.save_current_label())
        self.label_entry.bind('<KeyRelease>', self._on_label_change)

        # Auto next checkbox
        auto_next_check = ttk.Checkbutton(input_frame, text="Auto Next", variable=self.auto_next_var)
        auto_next_check.grid(row=0, column=2, sticky=tk.W, padx=(5, 0))

        # Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E))

        ttk.Button(button_frame, text="‚¨ÖÔ∏è Previous", command=self.previous_image).grid(row=0, column=0, padx=(0, 5))
        ttk.Button(button_frame, text="üíæ Save Label", command=self.save_current_label).grid(row=0, column=1, padx=(0, 5))
        ttk.Button(button_frame, text="‚è≠Ô∏è Skip", command=self.skip_current).grid(row=0, column=2, padx=(0, 5))
        ttk.Button(button_frame, text="Next ‚û°Ô∏è", command=self.next_image).grid(row=0, column=3, padx=(0, 5))

        button_frame.columnconfigure(4, weight=1)
        ttk.Button(button_frame, text="üìä Statistics", command=self.show_statistics).grid(row=0, column=5, padx=(5, 0))

        # Keyboard shortcuts
        self.root.bind('<Left>', lambda e: self.previous_image())
        self.root.bind('<Right>', lambda e: self.next_image())
        self.root.bind('<Control-s>', lambda e: self.save_current_label())
        self.root.bind('<Escape>', lambda e: self.root.quit())

        # Load first image
        self.update_display()

        # Focus on entry
        self.label_entry.focus()

    def _on_label_change(self, event=None):
        """Callback khi label text thay ƒë·ªïi"""
        label = self.label_entry.get().strip()
        if label:
            valid, message = self._validate_label(label)
            if valid:
                self.status_var.set(f"‚úÖ {message}")
            else:
                self.status_var.set(f"‚ùå {message}")
        else:
            self.status_var.set("Nh·∫≠p label cho ·∫£nh n√†y...")

    def update_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã ·∫£nh v√† th√¥ng tin"""
        if not self.image_files or self.current_index >= len(self.image_files):
            self.status_var.set("ƒê√£ ho√†n th√†nh t·∫•t c·∫£ ·∫£nh!")
            return

        current_file = self.image_files[self.current_index]

        # Update progress
        labeled_count = self.progress.get('labeled_count', 0)
        self.progress_var.set(f"Image {self.current_index + 1}/{len(self.image_files)} | "
                             f"Labeled: {labeled_count} | File: {current_file.name}")

        # Load v√† hi·ªÉn th·ªã ·∫£nh
        try:
            pil_img = self._preprocess_image_for_display(current_file)
            if pil_img:
                # Convert to PhotoImage
                self.current_image = ImageTk.PhotoImage(pil_img)

                # Clear canvas v√† add image
                self.canvas.delete("all")
                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.current_image)

                # Update scroll region
                self.canvas.configure(scrollregion=self.canvas.bbox("all"))
            else:
                self.canvas.delete("all")
                self.canvas.create_text(100, 50, text="Cannot load image", fill="red")
        except Exception as e:
            print(f"Error loading image {current_file}: {e}")
            self.canvas.delete("all")
            self.canvas.create_text(100, 50, text=f"Error: {e}", fill="red")

        # Load existing label n·∫øu c√≥
        existing_label = self.progress.get('labeled_files', {}).get(str(current_file), '')
        self.label_entry.delete(0, tk.END)
        self.label_entry.insert(0, existing_label)

        self.status_var.set("Nh·∫≠p label cho ·∫£nh n√†y...")

    def save_current_label(self):
        """L∆∞u label cho ·∫£nh hi·ªán t·∫°i"""
        if self.current_index >= len(self.image_files):
            return

        label = self.label_entry.get().strip().lower()
        if not label:
            messagebox.showwarning("Warning", "Vui l√≤ng nh·∫≠p label!")
            return

        valid, message = self._validate_label(label)
        if not valid:
            messagebox.showerror("Error", message)
            return

        current_file = self.image_files[self.current_index]

        try:
            # T·∫°o filename m·ªõi v·ªõi label
            new_filename = f"{label}.png"
            new_path = self.output_dir / new_filename

            # N·∫øu file ƒë√£ t·ªìn t·∫°i, th√™m suffix
            counter = 1
            while new_path.exists():
                new_filename = f"{label}_{counter:03d}.png"
                new_path = self.output_dir / new_filename
                counter += 1

            # Copy file v·ªõi t√™n m·ªõi
            shutil.copy2(current_file, new_path)

            # Update progress
            if str(current_file) not in self.progress.get('labeled_files', {}):
                self.progress['labeled_count'] = self.progress.get('labeled_count', 0) + 1

            self.progress.setdefault('labeled_files', {})[str(current_file)] = label
            self.progress['last_saved'] = datetime.now().isoformat()
            self._save_progress()

            self.status_var.set(f"‚úÖ Saved as {new_filename}")

            # T·ª± ƒë·ªông chuy·ªÉn sang ·∫£nh ti·∫øp theo n·∫øu ƒë∆∞·ª£c b·∫≠t
            if self.auto_next_var.get():
                # self.root.after(100, self.next_image)  # Delay ng·∫Øn 100ms ƒë·ªÉ user th·∫•y status message
                self.next_image()

        except Exception as e:
            messagebox.showerror("Error", f"Cannot save file: {e}")

    def next_image(self):
        """Chuy·ªÉn sang ·∫£nh ti·∫øp theo"""
        if self.current_index < len(self.image_files) - 1:
            self.current_index += 1
            self.progress['current_index'] = self.current_index
            self._save_progress()
            self.update_display()
            # Focus l·∫°i entry field (update_display ƒë√£ load existing label n·∫øu c√≥)
            self.label_entry.focus()
        else:
            messagebox.showinfo("Complete", "ƒê√£ ho√†n th√†nh t·∫•t c·∫£ ·∫£nh!")

    def previous_image(self):
        """Quay l·∫°i ·∫£nh tr∆∞·ªõc"""
        if self.current_index > 0:
            self.current_index -= 1
            self.progress['current_index'] = self.current_index
            self._save_progress()
            self.update_display()
            # Focus l·∫°i entry field
            self.label_entry.focus()

    def skip_current(self):
        """B·ªè qua ·∫£nh hi·ªán t·∫°i"""
        self.next_image()

    def show_statistics(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ labeling"""
        labeled_count = self.progress.get('labeled_count', 0)
        total_count = len(self.image_files)
        remaining = total_count - labeled_count

        # Th·ªëng k√™ labels
        labels = list(self.progress.get('labeled_files', {}).values())
        unique_labels = set(labels)

        stats_text = f"""Labeling Statistics:

Total Images: {total_count}
Labeled: {labeled_count}
Remaining: {remaining}
Progress: {labeled_count/total_count*100:.1f}%

Unique Labels: {len(unique_labels)}
Labels: {', '.join(sorted(unique_labels))}

Session Started: {self.progress.get('session_start', 'Unknown')}
Last Saved: {self.progress.get('last_saved', 'Never')}
"""

        messagebox.showinfo("Statistics", stats_text)

    def run(self):
        """Ch·∫°y GUI application"""
        if not self.image_files:
            print("Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c input!")
            return

        self.create_gui()

        print("=== Captcha Labeling Tool ===")
        print("Keyboard Shortcuts:")
        print("  ‚Üê ‚Üí : Navigate images")
        print("  Enter : Save label")
        print("  Ctrl+S : Save label")
        print("  Escape : Quit")
        print()

        self.root.mainloop()

def main():
    parser = argparse.ArgumentParser(description='GUI tool for labeling captcha images')
    parser.add_argument('-i', '--input', type=str, default='image_crawl/raw_captcha_images',
                       help='Input directory containing raw images')
    parser.add_argument('-o', '--output', type=str, default='image_crawl/train_images',
                       help='Output directory for labeled images')
    parser.add_argument('-p', '--progress', type=str, default='image_crawl/labeling_progress.json',
                       help='Progress file path')

    args = parser.parse_args()

    # Ki·ªÉm tra input directory
    if not os.path.exists(args.input):
        print(f"‚ùå Input directory kh√¥ng t·ªìn t·∫°i: {args.input}")
        return 1

    # T·∫°o labeling tool
    tool = CaptchaLabelingTool(
        input_dir=args.input,
        output_dir=args.output,
        progress_file=args.progress
    )

    try:
        tool.run()
        print("\n‚úÖ Labeling session completed.")
        return 0
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Labeling interrupted by user")
        return 1
    except Exception as e:
        print(f"\n‚ùå Error in labeling tool: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
